"""
Automatic Exploit Generator class. Modified 22 August 2015
@author Matthew Ruffell <msr50@uclive.ac.nz>
"""

class ExploitGenerator (object):
    """
        Generic abstract class for generating and delievering exploit payloads
        found as a result from symbolic execution. Ideally should deliever the
        payload through a Communicator.
    """
    
    def __init__ (self):
        """ Initialisation """
        assert (False)
    
    def construct_input (self, path):
        """ Constructs an input such that the firmware would be placed in a 
            vulnerable state. The input is found from the path information
            the symbolic executor outputs. """
        assert (False)
        
    def construct_payload (self, path, custom_payload):
        """ Constructs a payload from infromation gained from the symbolic 
            executor. """
        assert (False)
        
    def set_input (self, custom_input):
        """ Explicity set input to reach a vulnerable state """
        assert (False)
    
    def set_payload (self, custom_payload):
        """ Explicity set a payload to exploit a vulnerable state """
        assert (False)
        
    def constuct_exploit (self):
        """ Construct an exploit by concatenating crafted input and payload """
        assert (False)
    
    def deploy_exploit (self, communicator):
        """ Send the exploit to the target device through a communicator """
        assert (False)
        
    def get_exploit (self):
        """ Return the constructed exploit to it can be used or saved """
        assert (False)
